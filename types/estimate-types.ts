/**
 * @description
 * Defines TypeScript types and interfaces related to the estimate feature.
 * This includes enums, specific type aliases, and potentially more complex aggregated types.
 *
 * @dependencies
 * - @/db/schema: Imports database select/insert types and potentially CalculatedLineItem.
 *
 * @types
 * - EstimateStatus: An enum or union type defining possible estimate statuses.
 * - DischargePackageOption: An enum or union type for the discharge package choices.
 * - EstimateWithDetails: An example of a potentially complex type combining estimate data with related client, site, and line item data.
 * - EstimateInputData: Input structure for the main calculation logic.
 * - CalculationResult: Output structure from the main calculator function.
 * - EstimateSaveData: Data structure for creating a new estimate.
 * - EstimateUpdateData: Data structure for updating an estimate.
 */

import type {
  SelectClient,
  SelectEstimate,
  SelectEstimateLineItem,
  SelectSite,
  InsertEstimate,
  InsertEstimateLineItem,
  CalculatedLineItem // Assuming this is defined and exported from @/db/schema
} from "@/db/schema"

/**
 * @description Represents the possible statuses an estimate can have.
 */
export type EstimateStatus =
  | "draft"
  | "approved"
  | "synced"
  | "sent"
  | "archived"

/**
 * @description Represents the available discharge package options.
 */
export type DischargePackageOption = "A" | "B" | "C"

/**
 * @description Interface representing a complete estimate object, including related data.
 * Useful for passing comprehensive estimate data between server and client components or actions.
 * This type structure might evolve as features are implemented.
 */
export interface EstimateWithDetails extends SelectEstimate {
  client: SelectClient | null
  site: SelectSite | null
  lineItems: SelectEstimateLineItem[]
}

/**
 * Represents the input for a single line item before calculation.
 * Used as input for the estimate calculator and createEstimateAction.
 */
export interface UncalculatedEstimateLineItemInput {
  description: string
  materialId?: string | null
  materialQuantity?: number | null
  laborRateId?: string | null
  laborHours?: number | null
  equipmentId?: string | null
  equipmentDays?: number | null
  // Add other fields as needed (e.g., fixed cost)
}

/**
 * Represents the input required to create a new estimate.
 */
export interface CreateEstimateInput
  extends Omit<
    InsertEstimate,
    "id" | "userId" | "totalCost" | "status" | "createdAt" | "updatedAt"
  > {
  // userId will be derived from auth context in the action
  lineItems: UncalculatedEstimateLineItemInput[]
}

/**
 * Represents the data structure for an estimate including its line items.
 */
export interface EstimateWithLineItems extends SelectEstimate {
  lineItems: SelectEstimateLineItem[]
}

// Add other estimate-related types here as needed, for example:
// - Types for the calculation engine inputs/outputs
// - Types for specific form structures

// --- Types from User Plan --- //

// Input data required for the calculation
export interface EstimateInputData {
  gpm: number
  pumpSetting: number
  pumpingWaterLevel: number
  pressurePsi: number
  voltage: 240 | 480 // Enforce valid voltages
  prepTimeHours: number
  installTimeHours: number
  startTimeHours: number
  dischargePackage: "A" | "B" | "C"
}

// Output structure from the main calculator function
// Assumes CalculatedLineItem is imported from schema
export type CalculationResult = CalculatedLineItem[]

// Combine inputs with estimate metadata for saving
export interface EstimateSaveData extends EstimateInputData {
  customerId: string
  userId: string // Added userId
  siteAddressLine1?: string | null
  siteAddressLine2?: string | null
  siteCity?: string | null
  siteState?: string | null
  siteZip?: string | null
  siteCoordinates?: string | null
  intendedUse?: string | null
  notes?: string | null
  // estimateNumber is serial/generated by DB
  // status defaults to 'Draft'
}

// Type for data needed by update action
export interface EstimateUpdateData {
  estimateId: string
  userId: string // For authorization check
  estimateData: Partial<
    Omit<
      InsertEstimate,
      "id" | "userId" | "createdAt" | "updatedAt" | "estimateNumber"
    >
  > // Allow updating fields like notes, status, etc.
  lineItems: Omit<
    InsertEstimateLineItem,
    "id" | "estimateId" | "createdAt" | "updatedAt"
  >[] // Full list of potentially modified line items
}
